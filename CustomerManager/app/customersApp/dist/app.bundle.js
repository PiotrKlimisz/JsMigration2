!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},r.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=20)}([function(e,t,r){"use strict";var n;(n=function(e){var t=this;function r(e){for(var r=0,n=0;n<e.orders.length;n++){r+=e.orders[n].orderTotal}t.ordersTotal=r}t.orderby="product",t.reverse=!1,t.ordersTotal=0,t.customer,e.customer?(t.customer=e.customer,r(e.customer)):e.$on("customer",function(e,n){t.customer=n,r(n)}),t.setOrder=function(e){e===t.orderby&&(t.reverse=!t.reverse),t.orderby=e}}).$inject=["$scope"],angular.module("customersApp").controller("OrderChildController",n)},function(e,t,r){"use strict";var n;(n=angular.module("customersApp",["ngRoute","ngAnimate","wc.directives","ui.bootstrap","breeze.angular"])).config(["$routeProvider",function(e){var t="/app/customersApp/views/";e.when("/customers",{controller:"CustomersController",templateUrl:t+"customers/customers.html",controllerAs:"vm"}).when("/customerorders/:customerId",{controller:"CustomerOrdersController",templateUrl:t+"customers/customerOrders.html",controllerAs:"vm"}).when("/customeredit/:customerId",{controller:"CustomerEditController",templateUrl:t+"customers/customerEdit.html",controllerAs:"vm",secure:!0}).when("/orders",{controller:"OrdersController",templateUrl:t+"orders/orders.html",controllerAs:"vm"}).when("/about",{controller:"AboutController",templateUrl:t+"about.html",controllerAs:"vm"}).when("/login/:redirect*?",{controller:"LoginController",templateUrl:t+"login.html",controllerAs:"vm"}).otherwise({redirectTo:"/customers"})}]),n.run(["$rootScope","$location","authService",function(e,t,r){e.$on("$routeChangeStart",function(t,n,o){n&&n.$$route&&n.$$route.secure&&(r.user.isAuthenticated||e.$evalAsync(function(){r.redirectToLogin()}))})}])},function(e,t,r){"use strict";var n;(n=function(e,t,r){var n=this,o="/";n.email=null,n.password=null,n.errorMessage=null,n.login=function(){r.login(n.email,n.password).then(function(r){r?(r&&t&&t.redirect&&(o+=t.redirect),e.path(o)):n.errorMessage="Unable to login"})}}).$inject=["$location","$routeParams","authService"],angular.module("customersApp").controller("LoginController",n)},function(e,t,r){"use strict";var n;(n=function(e,t,r,n){var o=this;function u(){var e="/login"+t.$$path;t.replace(),t.path(e)}function s(){o.loginLogoutText=n.user.isAuthenticated?"Logout":"Login"}o.isCollapsed=!1,o.appTitle=r.useBreeze?"Customer Management Breeze":"Customer Management",o.highlight=function(e){return t.path().substr(0,e.length)===e},o.loginOrOut=function(){s(),n.user.isAuthenticated&&n.logout().then(function(){t.path("/")}),u()},e.$on("loginStatusChanged",function(e){s()}),e.$on("redirectToLogin",function(){u()}),s()}).$inject=["$scope","$location","config","authService"],angular.module("customersApp").controller("NavbarController",n)},function(e,t,r){"use strict";var n;(n=function(){}).$inject=[],angular.module("customersApp").controller("AboutController",n)},function(e,t,r){"use strict";var n;(n=function(e,t,r){var n=this;function o(t){n.filteredCustomers=e("nameProductFilter")(n.customers,t),n.filteredCount=n.filteredCustomers.length}function u(){r.getCustomers(n.currentPage-1,n.pageSize).then(function(e){n.totalRecords=e.totalRecords,n.customers=e.results,o("")},function(e){t.alert(e.message)})}n.customers=[],n.filteredCustomers,n.filteredCount,n.totalRecords=0,n.pageSize=10,n.currentPage=1,u(),n.pageChanged=function(e){n.currentPage=e,u()},n.searchTextChanged=function(){o(n.searchText)}}).$inject=["$filter","$window","dataService"],angular.module("customersApp").controller("OrdersController",n)},function(e,t){var r;(r=function(e,t,r,n,o,u,s){var a=this;function i(){u.getCustomersSummary(a.currentPage-1,a.pageSize).then(function(e){a.totalRecords=e.totalRecords,a.customers=e.results,c(""),n(function(){a.cardAnimationClass=""},1e3)},function(e){r.alert("Sorry, an error occurred: "+e.data.message)})}function c(e){a.filteredCustomers=t("nameCityStateFilter")(a.customers,e),a.filteredCount=a.filteredCustomers.length}a.customers=[],a.filteredCustomers=[],a.filteredCount=0,a.orderby="lastName",a.reverse=!1,a.searchText=null,a.cardAnimationClass=".card-animation",a.totalRecords=0,a.pageSize=10,a.currentPage=1,a.pageChanged=function(e){a.currentPage=e,i()},a.deleteCustomer=function(t){if(o.user.isAuthenticated){var n=function(e){for(var t=0;t<a.customers.length;t++){var r=a.customers[t];if(r.id===e)return r}return null}(t),i={closeButtonText:"Cancel",actionButtonText:"Delete Customer",headerText:"Delete "+(n.firstName+" "+n.lastName)+"?",bodyText:"Are you sure you want to delete this customer?"};s.showModal({},i).then(function(e){"ok"===e&&u.deleteCustomer(t).then(function(){for(var e=0;e<a.customers.length;e++)if(a.customers[e].id===t){a.customers.splice(e,1);break}c(a.searchText)},function(e){r.alert("Error deleting customer: "+e.message)})})}else e.path(o.loginPath+e.$$path)},a.DisplayModeEnum={Card:0,List:1},a.changeDisplayMode=function(e){switch(e){case a.DisplayModeEnum.Card:a.listDisplayModeEnabled=!1;break;case a.DisplayModeEnum.List:a.listDisplayModeEnabled=!0}},a.navigate=function(t){e.path(t)},a.setOrder=function(e){e===a.orderby&&(a.reverse=!a.reverse),a.orderby=e},a.searchTextChanged=function(){c(a.searchText)},i()}).$inject=["$location","$filter","$window","$timeout","authService","dataService","modalService"],angular.module("customersApp").controller("CustomersController",r)},function(e,t,r){"use strict";var n;(n=function(e,t,r,n){var o=this,u=t.customerId?parseInt(t.customerId):0;o.customer={},o.ordersTotal=0,u>0&&n.getCustomer(u).then(function(t){o.customer=t,e.$broadcast("customer",t)},function(e){r.alert("Sorry, an error occurred: "+e.message)})}).$inject=["$scope","$routeParams","$window","dataService"],angular.module("customersApp").controller("CustomerOrdersController",n)},function(e,t){var r;(r=function(e,t,r,n,o,u,s){var a,i,c=this,l=r.customerId?parseInt(r.customerId):0;function d(e,r,n){if(c.editForm&&c.editForm.$dirty){s.showModal({},{closeButtonText:"Cancel",actionButtonText:"Ignore Changes",headerText:"Unsaved Changes",bodyText:"You have unsaved changes. Leave the page?"}).then(function(e){"ok"===e&&(i(),t.path(t.url(r).hash()))}),e.preventDefault()}}function m(){e.editForm.$dirty=!1,c.updateStatus=!0,c.title="Edit",c.buttonText="Update",p()}function f(e){c.errorMessage=e.message,p()}function p(){a=n(function(){n.cancel(a),c.errorMessage="",c.updateStatus=!1},3e3)}c.customer={},c.states=[],c.title=l>0?"Edit":"Add",c.buttonText=l>0?"Update":"Add",c.updateStatus=!1,c.errorMessage="",c.isStateSelected=function(e,t){return e===t},c.saveCustomer=function(){e.editForm.$valid&&(c.customer.id?u.updateCustomer(c.customer).then(m,f):u.insertCustomer(c.customer).then(m,f))},c.deleteCustomer=function(){var e={closeButtonText:"Cancel",actionButtonText:"Delete Customer",headerText:"Delete "+(c.customer.firstName+" "+c.customer.lastName)+"?",bodyText:"Are you sure you want to delete this customer?"};s.showModal({},e).then(function(e){"ok"===e&&u.deleteCustomer(c.customer.id).then(function(){i(),t.path("/customers")},f)})},u.getStates().then(function(e){c.states=e},f).then(function(){l>0?u.getCustomer(l).then(function(e){c.customer=e},f):u.newCustomer().then(function(e){c.customer=e})}),i=e.$on("$locationChangeStart",d)}).$inject=["$scope","$location","$routeParams","$timeout","config","dataService","modalService"],angular.module("customersApp").controller("CustomerEditController",r)},function(e,t,r){"use strict";var n;(n=function(e){var t={backdrop:!0,keyboard:!0,modalFade:!0,templateUrl:"/app/customersApp/partials/modal.html"},r={closeButtonText:"Close",actionButtonText:"OK",headerText:"Proceed?",bodyText:"Perform this action?"};this.showModal=function(e,t){return e||(e={}),e.backdrop="static",this.show(e,t)},this.show=function(n,o){var u={},s={};return angular.extend(u,t,n),angular.extend(s,r,o),u.controller||(u.controller=function(e,t){e.modalOptions=s,e.modalOptions.ok=function(e){t.close("ok")},e.modalOptions.close=function(e){t.close("cancel")}},u.controller.$inject=["$scope","$modalInstance"]),e.open(u).result}}).$inject=["$modal"],angular.module("customersApp").service("modalService",n)},function(e,t,r){"use strict";var n;(n=function(e,t,r){return e.useBreeze?r:t}).$inject=["config","customersService","customersBreezeService"],angular.module("customersApp").factory("dataService",n)},function(e,t,r){"use strict";var n;(n=function(e,t){var r="/api/dataservice/",n={};function o(e){for(var t=e.length,r=0;r<t;r++){var n=e[r];if(n.orders){for(var o=n.orders.length,u=0;u<o;u++){var a=n.orders[u];a.orderTotal=a.quantity*a.price}n.ordersTotal=s(n)}}}function u(t,n,u){var s=t;return s+=3==arguments.length?function(e,t){return"?$top="+t+"&$skip="+e*t}(n,u):"",e.get(r+s).then(function(e){var t=e.data;return o(t),{totalRecords:parseInt(e.headers("X-InlineCount")),results:t}})}function s(e){for(var t=0,r=e.orders,n=r.length,o=0;o<n;o++)t+=r[o].orderTotal;return t}return n.getCustomers=function(e,t){return u("customers",e,t)},n.getCustomersSummary=function(e,t){return u("customersSummary",e,t)},n.getStates=function(){return e.get(r+"states").then(function(e){return e.data})},n.checkUniqueValue=function(t,n,o){return t||(t=0),e.get(r+"checkUnique/"+t+"?property="+n+"&value="+escape(o)).then(function(e){return e.data.status})},n.insertCustomer=function(t){return e.post(r+"postCustomer",t).then(function(e){return t.id=e.data.id,e.data})},n.newCustomer=function(){return t.when({id:0})},n.updateCustomer=function(t){return e.put(r+"putCustomer/"+t.id,t).then(function(e){return e.data})},n.deleteCustomer=function(t){return e.delete(r+"deleteCustomer/"+t).then(function(e){return e.data})},n.getCustomer=function(t){return e.get(r+"customerById/"+t).then(function(e){return o([e.data]),e.data})},n}).$inject=["$http","$q"],angular.module("customersApp").factory("customersService",n)},function(e,t,r){"use strict";var n;(n=function(e,t,r){var n={},o=e.EntityQuery;e.config.initializeAdapterInstance("modelLibrary","backingStore",!0),e.NamingConvention.camelCase.setAsDefault();var u="breeze/breezedataservice",s=new e.EntityManager(u);function a(e,t){return e.using(s).execute().then(function(e,r,n){return t?e.results[0]:e.results},function(e){r.alert(e.message)})}function i(e,t,n,u){var a=o.from(e).skip(n*u).take(u).inlineCount(!0);return t&&""!=t&&(a=a.expand(t)),a.using(s).execute().then(function(e){return{totalRecords:parseInt(e.inlineCount),results:e.results}},function(e){r.alert("Error "+e.message)})}n.getCustomers=function(e,t){return i("Customers","orders",e,t)},n.getCustomersSummary=function(e,t){return i("CustomersSummary","",e,t)},n.getStates=function(){return function(e,t){var r=o.from(e);t&&(r=r.expand(t));return a(r)}("States")},n.getCustomer=function(e){return a(o.from("Customers").where("id","==",e).expand("orders, state"),!0)},n.checkUniqueValue=function(t,r,n){var u=new e.Predicate(r,"==",n),a=t?u.and(new e.Predicate("id","!=",t)):u;return o.from("Customers").where(a).take(0).inlineCount().using(s).execute().then(function(e){return!(!e||0!=e.inlineCount)})},n.insertCustomer=function(e){return s.saveChanges()},n.newCustomer=function(){return(e=s.metadataStore,e.hasMetadataFor(u)?t.when(!0):e.fetchMetadata(u)).then(function(){return s.createEntity("Customer",{firstName:"",lastName:""})});var e},n.deleteCustomer=function(t){if(!t)return r.alert("ID was null - cannot delete"),null;var n=s.getEntityByKey("Customer",t);n?(n.orders.slice().forEach(function(e){s.detachEntity(e)}),n.entityAspect.setDeleted()):n=s.createEntity("Customer",{id:t,gender:"Male"},e.EntityState.Deleted);return s.saveChanges()},n.updateCustomer=function(e){return s.saveChanges()};return s.metadataStore.registerEntityTypeCtor("Order",function(){},function(e){e.orderTotal=e.quantity*e.price}),s.metadataStore.registerEntityTypeCtor("Customer",function(){},function(e){e.ordersTotal=function(e){for(var t=0,r=e.orders,n=r.length,o=0;o<n;o++)t+=r[o].orderTotal;return t}(e)}),n}).$inject=["breeze","$q","$window"],angular.module("customersApp").factory("customersBreezeService",n)},function(e,t,r){"use strict";angular.module("customersApp").config(["$httpProvider",function(e){var t=function(e,t){var r=function(e){return e},n=function(r){return 401===r.status?(t.$broadcast("redirectToLogin",null),e.reject(r)):e.reject(r)};return function(e){return e.then(r,n)}};t.$inject=["$q","$rootScope"],e.interceptors.push(t)}])},function(e,t,r){"use strict";var n;(n=function(e,t){var r={loginPath:"/login",user:{isAuthenticated:!1,roles:null}};function n(e){r.user.isAuthenticated=e,t.$broadcast("loginStatusChanged",e)}return r.login=function(t,r){return e.post("/api/dataservice/login",{userLogin:{userName:t,password:r}}).then(function(e){var t=e.data.status;return n(t),t})},r.logout=function(){return e.post("/api/dataservice/logout").then(function(e){var t=!e.data.status;return n(t),t})},r.redirectToLogin=function(){t.$broadcast("redirectToLogin",null)},r}).$inject=["$http","$rootScope"],angular.module("customersApp").factory("authService",n)},function(e,t,r){"use strict";angular.module("customersApp").value("config",{useBreeze:!1})},function(e,t,r){"use strict";angular.module("customersApp").filter("nameProductFilter",function(){function e(e,t){if(e.orders)for(var r=0;r<e.orders.length;r++)if(e.orders[r].product.toLowerCase().indexOf(t)>-1)return!0;return!1}return function(t,r){if(!r||!t)return t;var n=[];r=r.toLowerCase();for(var o=0;o<t.length;o++){var u=t[o];(u.firstName.toLowerCase().indexOf(r)>-1||u.lastName.toLowerCase().indexOf(r)>-1||e(u,r))&&n.push(u)}return n}})},function(e,t,r){"use strict";angular.module("customersApp").filter("nameCityStateFilter",function(){return function(e,t){if(!t)return e;var r=[];t=t.toLowerCase();for(var n=0;n<e.length;n++){var o=e[n];(o.firstName.toLowerCase().indexOf(t)>-1||o.lastName.toLowerCase().indexOf(t)>-1||o.city.toLowerCase().indexOf(t)>-1||o.state.name.toLowerCase().indexOf(t)>-1)&&r.push(o)}return r}})},function(e,t,r){"use strict";var n;(n=function(e,t){return{restrict:"A",require:"ngModel",link:function(r,n,o,u){u.$asyncValidators.unique=function(r,n){var u=e.defer(),s=r||n,a=o.wcUniqueKey,i=o.wcUniqueProperty;return a&&i?(t.checkUniqueValue(a,i,s).then(function(e){e?u.resolve():u.reject()}),u.promise):e.when(!0)}}}}).$inject=["$q","dataService"],angular.module("customersApp").directive("wcUnique",n)},function(e,t,r){"use strict";angular.module("customersApp").animation(".card-animation",function(){return{enter:function(e,t){var r=100*Math.random();TweenMax.set(e,{opacity:0,left:r+"px"});var n=Math.random();TweenMax.to(e,.5,{opacity:1,left:"0px",ease:Back.easeInOut,delay:n,onComplete:t})},leave:function(e,t){TweenMax.to(e,.5,{opacity:0,left:"-50px",onComplete:t})}}})},function(e,t,r){"use strict";r.r(t);r(1),r(19),r(18),r(17),r(16),r(15),r(14),r(13),r(12),r(11),r(10),r(9),r(8),r(7),r(6),r(0),r(5),r(4),r(3),r(2)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,